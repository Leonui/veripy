////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.
// The following information is considered proprietary and confidential to Facebook,
// and may not be disclosed to any third party nor be used for any purpose other
// than to full fill service obligations to Facebook
////////////////////////////////////////////////////////////////////////////////////

#include pyramid_gen_include.h

&Module(parameter   NUMLAYERS = 4, CAMSIZEX = 640, DS_R1W1 = 0, DS_BE = 1, MW = 3, WW = 3, BPP = 8);
   
// include /project/tenjin/fba/design/icanma/veripy_test/fbsource/fbcode/infra_asic_fpga/common/tools/veripy/demo/verilog_build_flow/incl/dsx2_include.vh   
parameter  DS_X_PP =   2;
parameter  DS_Y_PP =   2;
parameter  PIX_CW  =   11;
parameter  PL      =   10;
parameter  BLOCK   =   3;
parameter  DSXW    =   12;
parameter  NO_RAM  =   BLOCK-1;
parameter  ADDR_W  =   clog2((CAMSIZEX/2)-1);
parameter  PLY     =   5;
parameter  PE      =   5;
parameter  DSY_PP  =   4;
   
  //-------------LocalParam Declaration-----------//    
  function integer clog2;
    input integer DW;
      begin 
        clog2 = 0;
        while (DW > 0) 
          begin
            DW    = DW >> 1  ;
            clog2 = clog2 +1 ;
          end
       end           
   endfunction//clog2 

   
   &Wires;

    
   &Regs;

    
   assign  ds2_line_valid        =  ds_out_lv         ;
   assign  ds2_frame_valid        =  ds_out_fv         ;
   assign  ds2_pixel[BPP-1:0] =  ds_out_p          ;
   assign  ds2_pixel_valid        =  ds_out_pv         ;

   &Clock clk;

   &AsyncReset rst_n;

   
   //Number of Pipeline stages 
   &Posedge;
       lv_sr[PL-1:0] <0=  {lv_sr[PL-2:0],i_line_valid } ; 
       fv_sr[PL-1:0] <0=  {fv_sr[PL-2:0],i_frame_valid } ;
       pv_sr[PL-1:0] <0=  {pv_sr[PL-2:0],i_pixel_valid } ;
   &EndPosedge;
     
   //Input Interface wrapper logic to find start and end pulses
   &Posedge;
       lv_r  <0= i_line_valid & i_frame_valid      ;
       fv_r  <0= i_frame_valid             ;
       le_r  <0= le               ;
       fe_r  <0= fe               ;
       pv_r  <0= i_pixel_valid             ;
   &EndPosedge;
    
    //Protocol Interface 
    assign ls = i_line_valid  & (~lv_r )     ;       
    assign le = lv_r  & (~i_line_valid )     ;   
    assign fs = i_frame_valid  & (~fv_r )     ;       
    assign fe = fv_r  & (~i_frame_valid )     ;  


   &Posedge;
       mode_r[MW-1:0] <0= mode ;
         
       if(ls && (!i_pixel_valid))
         ls_flag<0= 1'b1 ;
       else if (i_pixel_valid)
         ls_flag<= 1'b0 ;
   &EndPosedge;
    
   //Data path line shift register
   always @ (posedge clk)
    begin
      if((ls && i_pixel_valid) || (ls_flag&&i_pixel_valid)) 
        pix_sr[(BLOCK*BPP)-1:0] <= {i_pixel[BPP-1:0],i_pixel[BPP-1:0],{BPP{1'b0}} } ; 
      else if(le)
        pix_sr <= {pix_sr[((3)*BPP)-1  -:  BPP],
                   pix_sr[((3)*BPP)-1  -:  BPP],
                   pix_sr[((2)*BPP)-1  -:  BPP]} ;  
      else if (i_pixel_valid) 
        pix_sr <= {i_pixel,pix_sr[((BLOCK)*BPP)-1 : BPP]}        ;
      else        
        pix_sr <= pix_sr                                     ;     
    end 

   &Force internal pixel_bus;
   assign pixel_bus[(BLOCK*BPP)-1:0] =  pix_sr ;                     

   &BeginSkip;
   //debug - code
    wire [BPP-1:0] pixel_bus_w [0:BLOCK-1];
    genvar b;
    generate 
      for (b=0; b <  (BLOCK) ; b=b+1)
       begin   
         assign  pixel_bus_w[b]  = pixel_bus[(((b+1)*BPP) -1) -: BPP]; 
       end
    endgenerate  
   &EndSkip;
    
   
    always @ ( * )
      begin
        ds_x_pv_in = pixel_mask & (pv_r|le_r)                ;
      end
      
    //generate the pixel and line valid signal                
   &Posedge;
          ds_x_st_idx   <0= mode_r[0]                                           ;//mode 0,2,4 skip first pixel          
          pixel_mask    <0= le_r ? 1'b0 : pixel_mask ? 1'b1: (pixel_mask^pv_r)  ;//pixel mask      
          ds_x_pv_in_r  <0= ds_x_pv_in                                          ;//pixel valid
          ds_x_pv_mask  <0=  ( ds_x_pv_mask ^ ds_x_pv_in_r) & ds_x_lv_sr[1]     ;                
          ds_x_pv_out_r <0= ds_x_st_idx ?  ds_x_pv_in_r& (~ds_x_pv_mask ) & ds_x_fv_sr[0] & ds_x_lv_sr[0] : 
                                          ds_x_pv_in_r& ( ds_x_pv_mask ) & ds_x_fv_sr[0] & ds_x_lv_sr[0] ;
          line_mask     <0= le_r ? 1'b0 : (ls||i_pixel_valid) ? 1'b1: line_mask          ;
          frame_mask    <0= fe_r ? 1'b0 : (fs||i_pixel_valid) ? 1'b1: frame_mask         ;  
          ds_x_pv_r     <0= line_mask ? (i_pixel_valid|le) : 1'b0                        ; 
          ds_x_lv_sr[DS_X_PP-1:0]    <0=  {ds_x_lv_sr[DS_X_PP-2:0],line_mask  }              ; 
          ds_x_fv_sr[DS_X_PP-1:0]    <0=  {ds_x_fv_sr[DS_X_PP-2:0],frame_mask }              ;
          ds_x_pv_sr[DS_X_PP-1:0]    <0=  {ds_x_pv_sr[DS_X_PP-2:0],ds_x_pv_r  }              ;

   &EndPosedge;


  &BeginInstance ds2_function ds2_x_function;
  &Param BPP BPP;
  &Param DS_Y 0;
  &Param COFF_W 3;
  &Param O_DW DSXb;
  &Connect pixel pixel_bus;
  &Connect sum_out x_sum[DSXW+1:0];
  &EndInstance;
 
  //down scale by X output verified
  assign ds2_x_lv = ds_x_lv_sr[1]   ; 
  assign ds2_x_fv = ds_x_fv_sr[1]   ; 
  assign ds2_x_pv = ds_x_pv_out_r   ; 
  assign ds2_x_p[DSXW-1:0]  = x_sum[DSXW-1:0] ;
  
  
  &Force internal ds2_x_fv_2r;
  &Force internal ds2_x_lv_2r;

  &Posedge;
       ds2_x_lv_r <0= ds2_x_lv   ;
       ds2_x_fv_r <0= ds2_x_fv   ;
       ds2_x_fe_r <0= ds2_x_fe   ;
       ds2_x_lv_2r<0= ds2_x_lv_r ;
       ds2_x_fv_2r<0= ds2_x_fv_r ;     
  &EndPosedge;
    
  assign ds2_x_le = ( ds2_x_lv_r) & (~ds2_x_lv);
  assign ds2_x_fe = ( ds2_x_fv_r) & (~ds2_x_fv);
  assign ds2_x_ls = (~ds2_x_lv_r) & (ds2_x_lv) ;
  assign ds2_x_fs = (~ds2_x_fv_r) & (ds2_x_fv) ;  

  //-------------------RAM Write Interface Logic-------------------------//
  //Write RAM Replication logic for all the rams
  assign we[NO_RAM-1:0]       = wr_en_r                                       ;
  assign wa[(NO_RAM*ADDR_W)-1:0]       = {NO_RAM{wr_addr_r}}                           ;                
  assign wd[(NO_RAM*DSXW)-1:0]       = {NO_RAM{wr_data_r}}                           ; 
  assign ram_switch_rst  = ((ram_sw[NO_RAM-1]) & (ds2_x_le))      ;
  //RAM Write Interface Block

  parameter RAM_SW_RESET_VAL = {{NO_RAM-1{1'b0}},1'b1};        

  &Posedge;
           wr_data_r[DSXW-1:0]  <0= ds2_x_p                                ;
           wr_addr_r[ADDR_W-1:0]  <0= wr_addr                                ;
           wr_en_r[NO_RAM-1:0]    <0= {NO_RAM{ds2_x_pv}} &  ram_sw           ;
           //RAM Write Adder Generation logic
           if (ds2_x_le ||ds2_x_fe)
             begin
               wr_addr[ADDR_W-1:0] <0= {ADDR_W{1'b0}}                        ; 
             end
           else if(ds2_x_pv)    
             begin
               wr_addr <= wr_addr + {{ADDR_W-1{1'b0}},1'b1}     ;
             end
           else 
             begin
               wr_addr <= wr_addr                               ;
             end
           //RAM Switch Logic Counter          
           if(ram_switch_rst ||ds2_x_fe )
             begin
               ram_sw[NO_RAM-1:0] <RAM_SW_RESET_VAL= {{NO_RAM-1{1'b0}},1'b1}                ;
             end
           else if(ds2_x_le) 
             begin
               ram_sw <= {ram_sw[NO_RAM-2:0],1'b0}              ;
             end
           else
             begin
               ram_sw <= ram_sw                                 ; 
             end    
  &EndPosedge;
     
  
  &BeginInstance generic_mem_wrapper u0_lb_dsx2_x;
  &Param R1W1 DS_R1W1;
  &Param BE DS_BE;
  &Param NO_RAM NO_RAM;
  &Param DW DSXW;
  &Param AW ADDR_W;
  &Connect wr_en we;
  &Connect rd_en re;
  &Connect wr_addr wa;
  &Connect wr_data wd;
  &Connect rd_addr ra;
  &Connect rd_data rd[(NO_RAM*DSXW)-1:0];
  &EndInstance;

  //---------------RAM Read Interface Logic---------------//
  assign rd_en       = (rd_flag & ds2_x_pv)|extra_rd_en   ;
  assign ra[(NO_RAM*ADDR_W)-1:0]          = {NO_RAM{rd_addr}}                  ;
  assign re[NO_RAM-1:0]          = {NO_RAM{rd_en}}                    ;
  //RAM Read Interface Block 

  &Force internal rd_en_2r;

  &Posedge;
          rd_en_r  <0= rd_en                               ; //read data valid
          rd_en_2r <0= rd_en_r                             ; //pixel mux valid
          rd_en_sr[DSY_PP-1:0] <0= {rd_en_sr[DSY_PP-2:0],rd_en_r}      ;
          rd_flag_r <0= rd_flag                            ;
          //RAM Read flag asseration logic
          if( ds2_x_fe) 
            begin
              rd_flag  <0= 1'b0                            ; 
            end
          else if((ram_sw[NO_RAM-2]) && (ds2_x_le))
            begin
              rd_flag  <= 1'b1                            ;
            end
          else   
            begin
              rd_flag  <= rd_flag                         ;
            end
 
          //Read address generation logic
          if(ds2_x_le ||ds2_x_fe)
            begin
              rd_addr[ADDR_W-1:0] <0=  {ADDR_W{1'b0}}                  ;
            end
          else if(rd_en)
            begin
              rd_addr  <= rd_addr + {{ADDR_W-1{1'b0}},1'b1};
            end
          else
            begin
              rd_addr  <= rd_addr                         ;
            end
  &EndPosedge;

   
    //Read data first and last line find out logic
  &Posedge;
           sh_flag     <0= frame_end_r ? 1'b0 : (ds2_x_ls & (~fl_r) & (~ds2_x_fs)) +  sh_flag ;           
           ll_r        <0= extra_rd_en                                           ;
           ll_r_sr[DS_X_PP-1:0]     <0= {ll_r_sr[DS_X_PP-2:0],ll_r}                           ;
           ll_r_1d     <0= ll_r                                                  ;          
           max_addr[ADDR_W-1:0]    <0= (ds2_x_lv_r && ds2_x_fv_r && |wr_en_r)? wr_addr_r : max_addr ; 
           
           if(ds2_x_fe_r)
             extra_rd_en <0= 1'b1       ;
           else if((rd_addr == max_addr)&&(extra_rd_en))
             extra_rd_en <= 1'b0       ;
           else
             extra_rd_en <= extra_rd_en;

           if(ds2_x_fs)
            fl_r <0= 1'b1 ;
           else if ((!ram_sw[NO_RAM-1]) && (rd_flag))
            fl_r <= 1'b0 ;           
           else 
            fl_r <= fl_r ; 
            
  &EndPosedge;
     
   //Read Data shift register        
   //Data path line shift register
   always @ (posedge clk)
    begin
      if(ll_r && rd_en_r)
        begin
          pix_y_r1[DSXW-1:0] <= sh_flag? rd[(2*DSXW)-1:DSXW ]     :rd[DSXW-1:0 ]       ;
          pix_y_r2[DSXW-1:0] <= sh_flag? rd[DSXW-1:0 ]            :rd[(2*DSXW)-1:DSXW ];  
          pix_y_r3[DSXW-1:0] <= sh_flag? rd[DSXW-1:0 ]            :rd[(2*DSXW)-1:DSXW ];
        end    
      else if(fl_r && rd_en_r )
        begin
          pix_y_r1 <= rd[DSXW-1:0 ]                   ;
          pix_y_r2 <= rd[DSXW-1:0 ]                   ;
          pix_y_r3 <= wr_data_r                       ;
        end
      else if(rd_en_r)
        begin
          pix_y_r1 <= sh_flag ? rd[DSXW-1:0 ]       : rd[(2*DSXW)-1:DSXW ] ;
          pix_y_r2 <= sh_flag ? rd[(2*DSXW)-1:DSXW ]: rd[DSXW-1:0 ]        ;
          pix_y_r3 <= wr_data_r                                            ;
        end 
      else
        begin
          pix_y_r1 <= pix_y_r1                        ;
          pix_y_r2 <= pix_y_r2                        ;
          pix_y_r3 <= pix_y_r3                        ;
        end            
    end        
        
   assign pix_y_bus[(BLOCK*DSXW)-1:0] = {pix_y_r3,pix_y_r2,pix_y_r1} ;


   &BeginInstance ds2_function ds2_y_function;
   &Param BPP DSXW;
   &Param DS_Y 1;
   &Param COFF_W WW;
   &Param MW MW;
   &Param O_DW DSXW+4;
   &Connect pixel pix_y_bus;
   &Connect sum_out y_sum[DSXW+5:0];
   &EndInstance;
        
   assign y_sum_int[DSXW+5:0] = ( mode_r == {MW{1'b0}} ) ? y_sum :{{8{y_sum[DSXW+5]}},y_sum[DSXW+5:8]};


   &BeginInstance generic_rnd_off_sat u_ds2_y_rnd_off_sat;
   &Param IN_DW DSXW+6;
   &Param OUT_DW 9;
   &Param OUT_MSB 8;
   &Param OUT_LSB 0;
   &Param ADD_ROUND 0;
   &Connect data_in y_sum_int;
   &Connect data_out dsx2_yp[BPP:0];
   &EndInstance;
    
   assign ds_y_lv_w = (rd_flag_r &(ds2_x_lv_r)) | ll_r     ; 

  &Posedge;
           ds_y_pv_r      <0=  rd_en_r                                                      ;
           ds_y_lv_r      <0=  ds_y_lv_w                                                    ;
           ds_y_fv_r      <0=  (~rd_flag_r&rd_flag) ^ (~ll_r & ll_r_1d)^ ds_y_fv_r          ;
           start_y        <0=  ((mode_r==3'd0)|(mode_r==3'd3)|(mode_r==3'd4))               ; 
           lv_end         <0=  ds_y_fv_r & ( ds_y_lv_r & (~(ds_y_lv_w)))                    ;
           lv_mask_r      <0=  frame_end_r? 1'b0 : lv_end^lv_mask_r                         ;           
           ds_y_pv_2r     <0=  start_y ? ds_y_pv_r & lv_mask_r  : ds_y_pv_r & (~lv_mask_r)  ;
           ds_y_lv_2r     <0=  start_y ? ds_y_lv_r & lv_mask_r  : ds_y_lv_r & (~lv_mask_r)  ;
           ds_y_fv_2r     <0=  start_y ? ds_y_fv_r              : ds_y_fv_r                 ;                   
           ds_y_pv_sr[DS_Y_PP-1:0]     <0= {ds_y_pv_sr[DS_Y_PP-2:0],ds_y_pv_2r   }                      ;
           ds_y_lv_sr[DS_Y_PP-1:0]     <0= {ds_y_lv_sr[DS_Y_PP-2:0],ds_y_lv_2r   }                      ;
           ds_y_fv_sr[DS_Y_PP-1:0]     <0= {ds_y_fv_sr[DS_Y_PP-2:0],ds_y_fv_2r   }                      ;
           frame_end_r    <0= ds_y_fv_sr[DS_Y_PP-1] & (~ds_y_fv_sr[DS_Y_PP-2])             ;
  &EndPosedge;
    
    assign ds_out_lv =  ds_y_lv_sr[DS_Y_PP-1] ;
    assign ds_out_fv =  ds_y_fv_sr[DS_Y_PP-1] ;
    assign ds_out_pv =  ds_y_pv_sr[DS_Y_PP-1] ;
    assign ds_out_p[BPP-1:0]  =  dsx2_yp   [BPP-1:0  ] ;

   
endmodule //dsx2
